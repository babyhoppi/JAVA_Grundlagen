/*class*/class RechteckHamster extends AllroundHamster {
    // Konstruktor
    RechteckHamster(int r, int s, int b, int k) {
        super(r, s, b, k);
    }

    // zeichnet ab der Kachel (r/s) mit Koernern ein Quadrat
    // mit der angegebenen Seitenlaenge;
    // der Hamster tut nichts und liefert false, wenn er
    // nicht genuegend Koerner zum Zeichnen im Maul hat oder
    // ab der angegebenen Kachel nicht mehr genuegend Platz ist
    boolean zeichne(int r, int s, int breite, int hoehe) {
        if (breite + hoehe <= 0 || !this.genuegendKoernerImMaul(breite , hoehe)
                || !this.genuegendPlatz(r, s, breite, hoehe)) {
            return false;
        }

        this.merkenDerStartPosition();
        this.laufeZuKachel(r, s);
        this.setzeBlickrichtung(Hamster.OST);
        this.zeichneWirklich(breite, hoehe);
        this.geheZurStartPosition();
        return true;
    }

    // Hilfsmethoden

    boolean genuegendKoernerImMaul(int breite, int hoehe) {
        int benoetigteAnzahl = 0;
        if (breite + hoehe == 1) {
            benoetigteAnzahl = 1;
        } else {
            benoetigteAnzahl = (breite + hoehe - 1) * 4;
        }
        return benoetigteAnzahl <= this.getAnzahlKoerner();
    }

    boolean genuegendPlatz(int r, int s, int breite, int hoehe) {
        return s +  breite +  hoehe <= Territorium.getAnzahlSpalten()
                && r +  breite +  hoehe <= Territorium.getAnzahlReihen();
    }

    int rAlt, sAlt, bAlt;

    void merkenDerStartPosition() {
        this.rAlt = this.getReihe();
        this.sAlt = this.getSpalte();
        this.bAlt = this.getBlickrichtung();
    }

    void geheZurStartPosition() {
        this.laufeZuKachel(this.rAlt, this.sAlt);
        this.setzeBlickrichtung(this.bAlt);
    }

    void zeichneWirklich(int breite, int hoehe) {
        if(!kornDa()){
        	this.gib();
        }
        if (breite + hoehe > 1) {
            this.vorUndGib(breite - 1);
            this.rechtsUm();
            this.vorUndGib(hoehe - 2);
            this.rechtsUm();
            this.vorUndGib(breite - 1);
            this.rechtsUm();
            this.vorUndGib(hoehe - 3);
            this.vor();
            this.rechtsUm();
        }
    }

    void vorUndGib(int anzahl) {
        while (anzahl > 0) {
            this.vor();
            if(!kornDa()){
        		this.gib();
       		}
            anzahl = anzahl - 1;
        }
    }
}